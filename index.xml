<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introducción on Computación visual</title><link>https://gapuentesr.github.io/VisualComputing/</link><description>Recent content in Introducción on Computación visual</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://gapuentesr.github.io/VisualComputing/index.xml" rel="self" type="application/rss+xml"/><item><title>Creating a New Theme</title><link>https://gapuentesr.github.io/VisualComputing/posts/creating-a-new-theme/</link><pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate><guid>https://gapuentesr.github.io/VisualComputing/posts/creating-a-new-theme/</guid><description>Introduction # This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description></item><item><title>Migrate to Hugo from Jekyll</title><link>https://gapuentesr.github.io/VisualComputing/posts/migrate-from-jekyll/</link><pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate><guid>https://gapuentesr.github.io/VisualComputing/posts/migrate-from-jekyll/</guid><description>Move static content to static # Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description></item><item><title>(Hu)go Template Primer</title><link>https://gapuentesr.github.io/VisualComputing/posts/goisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://gapuentesr.github.io/VisualComputing/posts/goisforlovers/</guid><description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description></item><item><title>Getting Started with Hugo</title><link>https://gapuentesr.github.io/VisualComputing/posts/hugoisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://gapuentesr.github.io/VisualComputing/posts/hugoisforlovers/</guid><description>Step 1. Install Hugo # Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs # Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:</description></item><item><title/><link>https://gapuentesr.github.io/VisualComputing/docs/shortcodes/Ilusiones-%C3%B3pticas/1.-L%C3%ADneas-Figuras/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gapuentesr.github.io/VisualComputing/docs/shortcodes/Ilusiones-%C3%B3pticas/1.-L%C3%ADneas-Figuras/</guid><description>Líneas # Punto de fuga # Es un punto de la imagen en el que líneas paralelas parecen converger en la distancia.
Esta ilusión óptica se produce porque la cosas se ven cada vez más pequeñas según se van alejando, hasta que parecen un único punto. La distancia entre dos líneas paralelas que comienzan en el primer plano también se va haciendo cada vez menor. Esto es lo que causa la impresión de las líneas que convergen.</description></item><item><title/><link>https://gapuentesr.github.io/VisualComputing/docs/shortcodes/Ilusiones-%C3%B3pticas/2.-Poggendorff-Illusion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gapuentesr.github.io/VisualComputing/docs/shortcodes/Ilusiones-%C3%B3pticas/2.-Poggendorff-Illusion/</guid><description>Poggendorff Illusion # En la imagen de arriba a la izquierda, puede ver el efecto básico: los dos extremos de un segmento de línea recta que pasa detrás de un rectángulo oscuro aparecen desplazados cuando, de hecho, están alineados. Coloque el puntero del mouse sobre la imagen (o tóquelo) para convencerlo de esto.
A la derecha hay una variación en la que se puede variar el ancho de los rectángulos oclusivos o se pueden hacer parcialmente transparentes.</description></item><item><title/><link>https://gapuentesr.github.io/VisualComputing/docs/shortcodes/Ilusiones-%C3%B3pticas/3.-Moir%C3%A9-Patterns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gapuentesr.github.io/VisualComputing/docs/shortcodes/Ilusiones-%C3%B3pticas/3.-Moir%C3%A9-Patterns/</guid><description>Moiré Patterns # En la animación siguiente se ven dos pares de conjuntos de anillos concéntricos. El azul se mueve un poco, y la superposición de los anillos azules con los anillos de fondo verde crea bandas oscuras curvas. Estos se conocen como “moirés” (francés). Los dos patrones están superpuestos, por lo que la luz tiene que pasar por ambos patrones (o bloquearse, según sea el caso). Esto implica una multiplicación de los dos valores de transmitancia, y la multiplicación de patrones con frecuencias espaciales similares hace que aparezcan frecuencias diferentes.</description></item><item><title/><link>https://gapuentesr.github.io/VisualComputing/docs/shortcodes/Rendering-3D/1.-Rendering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gapuentesr.github.io/VisualComputing/docs/shortcodes/Rendering-3D/1.-Rendering/</guid><description>Software de renderizado # ¿Qué es renderizar? # La renderización es el proceso de generar una imagen a partir de un modelo 2D o 3D por medio de un software de computador. En la mayoría de los casos, se consigue un efecto óptico que permite una visión realista, con profundidad y textura.
Debido a que las imágenes digitales obtenidas (o Renders), son realizadas a partir de programas de renderización 3D, estas pueden representar cualquier tipo de ángulo de visión en los 360 grados posibles en la escena y el modelo.</description></item><item><title/><link>https://gapuentesr.github.io/VisualComputing/docs/shortcodes/Rendering-3D/2.-Tecnicas-de-interacci%C3%B3n-3D/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gapuentesr.github.io/VisualComputing/docs/shortcodes/Rendering-3D/2.-Tecnicas-de-interacci%C3%B3n-3D/</guid><description>Estudio de las técnicas de interacción para entornos 3D interactivos # Revisión de las técnicas de interacción no inmersivas para la navegación, la selección y la manipulación, y el control del sistema. Se espera ayudar a los investigadores y desarrolladores de aplicaciones 3D interactivas, a que tengan una visión más clara del tema y en particular a los nuevos aprendices de aplicaciones interactivas en 3D.
Introducción # A pesar de que las personas pasan toda su vida en un mundo 3D les resulta difícil interactuar en entornos 3D interactivos.</description></item><item><title/><link>https://gapuentesr.github.io/VisualComputing/docs/shortcodes/Rendering-3D/3.-Ejemplo-PoseNet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gapuentesr.github.io/VisualComputing/docs/shortcodes/Rendering-3D/3.-Ejemplo-PoseNet/</guid><description>PoseNet # ¿Qués es PoseNet? # PoseNet es un modelo TensorFlow de aprendizaje profundo que permite estimar la pose humana en tiempo real (con imagen o video) al detectar partes del cuerpo como codos, caderas, muñecas, rodillas, tobillos y formar una estructura esquelética de su pose al unir estos puntos.
PoseNet brinda un total de 17 puntos clave que se pueden usar, desde el ojo hasta los oídos, las rodillas y los tobillos.</description></item><item><title/><link>https://gapuentesr.github.io/VisualComputing/docs/shortcodes/Shaders/1.-Texturing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gapuentesr.github.io/VisualComputing/docs/shortcodes/Shaders/1.-Texturing/</guid><description> Texturing # UV Visualization # Blue channel # 3D - World # Screen # Lightness visualization #</description></item><item><title/><link>https://gapuentesr.github.io/VisualComputing/docs/shortcodes/Shaders/2.-Image-processing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gapuentesr.github.io/VisualComputing/docs/shortcodes/Shaders/2.-Image-processing/</guid><description> Image processing # Mask #</description></item><item><title/><link>https://gapuentesr.github.io/VisualComputing/docs/shortcodes/Shaders/3.-Procedural-texturing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gapuentesr.github.io/VisualComputing/docs/shortcodes/Shaders/3.-Procedural-texturing/</guid><description> Procedural texturing #</description></item><item><title/><link>https://gapuentesr.github.io/VisualComputing/docs/shortcodes/Shaders/4.-Pixelado/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gapuentesr.github.io/VisualComputing/docs/shortcodes/Shaders/4.-Pixelado/</guid><description> Pixelado #</description></item></channel></rss>